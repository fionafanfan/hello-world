<mxfile host="app.diagrams.net" modified="2022-10-12T10:17:35.572Z" agent="5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.42" etag="Q4nWvHiGWnwEx-zqanD7" version="20.4.0" type="github">
  <diagram id="HNIBh7hFgDvnO9I5xE05" name="第 1 页">
    <mxGraphModel dx="2845" dy="1793" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="0" pageScale="1" pageWidth="827" pageHeight="1169" background="#E6E6E6" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="node5" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;abc.ABC&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;" parent="1" vertex="1">
          <mxGeometry x="1025" y="529" width="91" height="30" as="geometry" />
        </mxCell>
        <mxCell id="node6" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;abc.ABCMeta&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __abstractmethods__: &lt;br/&gt; abstracts: &lt;br/&gt; _abc_negative_cache: &lt;br/&gt; _abc_registry: &lt;br/&gt; cls: &lt;br/&gt; value: &lt;br/&gt; _abc_negative_cache_version: &lt;br/&gt; _abc_cache: &lt;br/&gt; _abc_invalidation_counter: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __new__(mcls, name, bases, namespace, **kwargs): &lt;br/&gt; register(cls, subclass): &lt;br/&gt; _dump_registry(cls, file=None): &lt;br/&gt; __instancecheck__(cls, instance): &lt;br/&gt; __subclasscheck__(cls, subclass): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;" parent="1" vertex="1">
          <mxGeometry x="569" y="259" width="325" height="356" as="geometry" />
        </mxCell>
        <mxCell id="node1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;bank_login.biz.bot.Bot&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; _disk_cache: &lt;br/&gt; _login_parameter: &lt;br/&gt; _kafka_producer: &lt;br/&gt; _recent_login_response: &lt;br/&gt; _sent_balance_flag: &lt;br/&gt; _wait: &lt;br/&gt; _heartbeat_thread: &lt;br/&gt; _online_flag: &lt;br/&gt; _id: &lt;br/&gt; _driver: &lt;br/&gt; _cancel_orders_info: &lt;br/&gt; ACCOUNT_ID: &lt;br/&gt; is_need_driver: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __init__(self): &lt;br/&gt; __init(self): &lt;br/&gt; subscribe_kafka_topic(self, topic): &lt;br/&gt; _init_heartbeat_thread(self): &lt;br/&gt; _init_driver(self): &lt;br/&gt; _init_sent_balance_flag(self): &lt;br/&gt; support_bank_code(cls): &lt;br/&gt; support_bank_account(cls): &lt;br/&gt; support_account_id(cls): &lt;br/&gt; bank_code(self): &lt;br/&gt; bank_type(self): &lt;br/&gt; account(self): &lt;br/&gt; account_id(self): &lt;br/&gt; order_mgr(self): &lt;br/&gt; position_mgr(self): &lt;br/&gt; statement_mgr(self): &lt;br/&gt; driver(self): &lt;br/&gt; kafka_producer(self): &lt;br/&gt; id(self): &lt;br/&gt; market(self): &lt;br/&gt; max_order(self): &lt;br/&gt; disk_cache(self): &lt;br/&gt; login_parameter(self): &lt;br/&gt; recent_bot_event(self): &lt;br/&gt; recent_required_server_event(self): &lt;br/&gt; netloc(self): &lt;br/&gt; today(self): &lt;br/&gt; on_loop(self): &lt;br/&gt; on_boot(self): &lt;br/&gt; on_login(self, request_args): &lt;br/&gt; on_cancel_trade(self, request_args): &lt;br/&gt; on_quick_trade(self, request_args): &lt;br/&gt; on_strategy_trade(self, request_args): &lt;br/&gt; on_get_stock_holding(self, request_args): &lt;br/&gt; on_get_statement(self, request_args): &lt;br/&gt; _parse_server_event_id(server_event_id): &lt;br/&gt; _update_login_parameter(self, login_args: dict): &lt;br/&gt; _heartbeat_thread_func(self): &lt;br/&gt; set_sent_balance_flag(self): &lt;br/&gt; sent_balance_flag(self): &lt;br/&gt; departmentId(self): &lt;br/&gt; start_heartbeat(self): &lt;br/&gt; stop_heartbeat(self): &lt;br/&gt; close(self): &lt;br/&gt; get_last_trade_date(self, back_or_forward=0): &lt;br/&gt; get_session_with_cookie(self): &lt;br/&gt; __str__(self): &lt;br/&gt; is_element_clickable(self, method=By.CSS_SELECTOR, xpath_or_css_str=&amp;#39;&amp;#39;,                              wait_time=_EXPLICIT_WAIT_TIME): &lt;br/&gt; is_element_located(self, method=By.CSS_SELECTOR, xpath_or_css_str=&amp;#39;&amp;#39;,                            wait_time=_EXPLICIT_WAIT_TIME): &lt;br/&gt; is_element_visible(self, method=By.CSS_SELECTOR, xpath_or_css_str=&amp;#39;&amp;#39;,                            wait_time=_EXPLICIT_WAIT_TIME): &lt;br/&gt; is_expected_server_event(self, server_event_id: ServerEventIdType): &lt;br/&gt; is_login(self): &lt;br/&gt; no_wait_on_loop_topics(self): &lt;br/&gt; _is_trade_queue_empty(): &lt;br/&gt; make_abandoned_order_response(self, force=False): &lt;br/&gt; get_current_screenshot(self): &lt;br/&gt; save_current_screenshot(self, image_name=&amp;#39;&amp;#39;): &lt;br/&gt; save_image(img: Image, name): &lt;br/&gt; save_html(html, name, encoding=&amp;#39;utf-8&amp;#39;): &lt;br/&gt; calc_screen_zom_scale(): &lt;br/&gt; get_element_screenshot(self, element, save=True, name=&amp;#39;captcha&amp;#39;): &lt;br/&gt; gen_daily_settlement_pdf_name(self, date=&amp;#39;&amp;#39;, page=1): &lt;br/&gt; gen_sent_balance_flag(self): &lt;br/&gt; response_msg(self, where=ResponseMsgWay.Redis, key=&amp;#39;&amp;#39;, value=&amp;#39;&amp;#39;,                      expire=3, replace_double_quotes_to_single=True): &lt;br/&gt; response_msg2(self, resp: Response): &lt;br/&gt; response_login_msg(self, required_server_event_id, bot_event_id=BotEventIdType.Other,                            verification_code=&amp;#39;&amp;#39;, phone_suffix=&amp;#39;&amp;#39;, verify_types=[],                            errorMsg=&amp;#39;&amp;#39;, data=dict()): &lt;br/&gt; response_balance_msg(self, deposits: list, operate_user_id=0): &lt;br/&gt; buy(self, stock_code, quantity, price, trading_type): &lt;br/&gt; sell(self, stock_code, quantity, price, trading_type): &lt;br/&gt; sell_all(self, stock_code, price, trading_type): &lt;br/&gt; cancel_order(self, order: ServerCancelOrderMsg): &lt;br/&gt; cancel_order_common_check(self, cancel_order: ServerCancelOrderMsg): &lt;br/&gt; place_order_common_check(self, order: ServerTradeOrderMsg): &lt;br/&gt; place_quick_order(self, order: (ServerTradeOrderMsg, dict)): &lt;br/&gt; place_strategy_order(self, order: (ServerTradeOrderMsg, dict)): &lt;br/&gt; place_order(self, order: (ServerTradeOrderMsg, dict), trade_type: KafkaMsgType): &lt;br/&gt; sync_order(self, *args, **kwargs): &lt;br/&gt; sync_statement(self, *args, **kwargs): &lt;br/&gt; get_position(self, request_args): &lt;br/&gt; get_statement(self, request_args): &lt;br/&gt; get_statement_balance(self, business_type=None, deposits=[], operate_user_id=0): &lt;br/&gt; get_balance(self, deposits=[], operate_user_id=0): &lt;br/&gt; complete_stock_code(self, stock_code): &lt;br/&gt; split_statement_serial_number(id_): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;" parent="1" vertex="1">
          <mxGeometry x="-145" y="466" width="412" height="2265" as="geometry" />
        </mxCell>
        <mxCell id="node4" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;bank_login.biz.notice.KafkaNotifiable&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; notify_login(self, sender, **kwargs): &lt;br/&gt; notify_cancel_trade(self, sender, **kwargs): &lt;br/&gt; notify_quick_trade(self, sender, **kwargs): &lt;br/&gt; notify_strategy_trade(self, sender, **kwargs): &lt;br/&gt; notify_get_stock_holding(self, sender, **kwargs): &lt;br/&gt; notify_get_statement(self, sender, **kwargs): &lt;br/&gt; notify_get_statement_balance(self, sender, **kwargs): &lt;br/&gt; on_login(self, request_args): &lt;br/&gt; on_cancel_trade(self, request_args): &lt;br/&gt; on_quick_trade(self, request_args): &lt;br/&gt; on_strategy_trade(self, request_args): &lt;br/&gt; on_get_stock_holding(self, request_args): &lt;br/&gt; on_get_statement(self, request_args): &lt;br/&gt; on_get_statement_balance(self, request_args): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;" parent="1" vertex="1">
          <mxGeometry x="824" y="675" width="344" height="353" as="geometry" />
        </mxCell>
        <mxCell id="node0" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;bank_login.bots.xinhongji.XinHongJi&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; _plaintext_login_pwd: &lt;br/&gt; timer_sync_daily_settlement: &lt;br/&gt; _have_get_last_trade_info: &lt;br/&gt; _order_mgr: &lt;br/&gt; timer_keep_health: &lt;br/&gt; _position_mgr: &lt;br/&gt; login_args_msg: &lt;br/&gt; _bank_account_alive: &lt;br/&gt; _account_info: &lt;br/&gt; _account_session: &lt;br/&gt; timer_sync_order_offline: &lt;br/&gt; _statement_mgr: &lt;br/&gt; _activate_login_page_count: &lt;br/&gt; _bank_trade_alive: &lt;br/&gt; timer_sync_order: &lt;br/&gt; _trade_session: &lt;br/&gt; _have_get_last_statement_info: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; XinHongJi.Page: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __init__(self): &lt;br/&gt; bank_account_alive(self): &lt;br/&gt; bank_trade_alive(self): &lt;br/&gt; account_session(self): &lt;br/&gt; trade_session(self): &lt;br/&gt; support_bank_code(cls): &lt;br/&gt; bank_code(self): &lt;br/&gt; bank_type(self): &lt;br/&gt; order_mgr(self): &lt;br/&gt; position_mgr(self): &lt;br/&gt; statement_mgr(self): &lt;br/&gt; account(self): &lt;br/&gt; market(self): &lt;br/&gt; max_order(self): &lt;br/&gt; on_boot(self): &lt;br/&gt; on_loop(self): &lt;br/&gt; is_login(self): &lt;br/&gt; on_login(self, request_args): &lt;br/&gt; on_quick_trade(self, request_args): &lt;br/&gt; on_strategy_trade(self, request_args): &lt;br/&gt; on_cancel_trade(self, request_args): &lt;br/&gt; on_get_stock_holding(self, request_args): &lt;br/&gt; on_get_statement(self, request_args): &lt;br/&gt; on_get_statement_balance(self, request_args): &lt;br/&gt; subscribe(self): &lt;br/&gt; activate_login_page(self): &lt;br/&gt; is_in_page(self, page: Page): &lt;br/&gt; is_time(self, action=&amp;quot;send_trade_info&amp;quot;): &lt;br/&gt; return_daily_trade_info(self): &lt;br/&gt; return_daily_settlement_info(self): &lt;br/&gt; return_daily_statement_info(self): &lt;br/&gt; is_trade_statement(statement_type): &lt;br/&gt; plaintext_login_pwd(self): &lt;br/&gt; init_money(self): &lt;br/&gt; check_login(self): &lt;br/&gt; after_login(self): &lt;br/&gt; switch_to_current_win(self): &lt;br/&gt; save_page_trade_cookies(self): &lt;br/&gt; get_account_info(self, get_holding=False): &lt;br/&gt; request_login(self): &lt;br/&gt; request_input_otp(self): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;" parent="1" vertex="1">
          <mxGeometry x="1320" y="648" width="302" height="1394" as="geometry" />
        </mxCell>
        <mxCell id="node2" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;object&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __doc__: &lt;br/&gt; __dict__: &lt;br/&gt; __slots__: &lt;br/&gt; __module__: &lt;br/&gt; __annotations__: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __class__(self: _T): &lt;br/&gt; __class__(self, __type: Type[object]): &lt;br/&gt; __init__(self): &lt;br/&gt; __new__(cls: Type[_T]): &lt;br/&gt; __setattr__(self, name: str, value: Any): &lt;br/&gt; __eq__(self, o: object): &lt;br/&gt; __ne__(self, o: object): &lt;br/&gt; __str__(self): &lt;br/&gt; __repr__(self): &lt;br/&gt; __hash__(self): &lt;br/&gt; __format__(self, format_spec: str): &lt;br/&gt; __getattribute__(self, name: str): &lt;br/&gt; __delattr__(self, name: str): &lt;br/&gt; __sizeof__(self): &lt;br/&gt; __reduce__(self): &lt;br/&gt; __reduce_ex__(self, protocol: SupportsIndex): &lt;br/&gt; __reduce_ex__(self, protocol: int): &lt;br/&gt; __dir__(self): &lt;br/&gt; __init_subclass__(cls): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;" parent="1" vertex="1">
          <mxGeometry x="1244" y="-13" width="296" height="586" as="geometry" />
        </mxCell>
        <mxCell id="node3" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;typing.Hashable&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __hash__(self): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;" parent="1" vertex="1">
          <mxGeometry x="956" y="154" width="149" height="58" as="geometry" />
        </mxCell>
        <mxCell id="edge5" value="" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=1;startArrow=classic;startSize=12;endArrow=none;exitX=0.000;exitY=0.500;exitDx=0;exitDy=0;entryX=1.000;entryY=0.800;entryDx=0;entryDy=0;" parent="1" source="node5" target="node6" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <Array as="points" />
          </mxGeometry>
        </mxCell>
        <mxCell id="label34" value="isinstanceof" style="edgeLabel;resizable=0;html=1;align=left;verticalAlign=top;" parent="edge5" vertex="1" connectable="0">
          <mxGeometry x="899" y="570" as="geometry" />
        </mxCell>
        <mxCell id="edge4" value="" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;exitX=1.000;exitY=0.500;exitDx=0;exitDy=0;entryX=0.000;entryY=0.950;entryDx=0;entryDy=0;" parent="1" source="node5" target="node2" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <Array as="points" />
          </mxGeometry>
        </mxCell>
        <mxCell id="edge6" value="" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;exitX=1.000;exitY=0.500;exitDx=0;exitDy=0;entryX=0.500;entryY=1.002;entryDx=0;entryDy=0;" parent="1" source="node1" target="node5" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="741" y="1598" />
              <mxPoint x="741" y="645" />
              <mxPoint x="1071" y="645" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="edge1" value="" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;exitX=1.000;exitY=0.170;exitDx=0;exitDy=0;entryX=0.000;entryY=0.500;entryDx=0;entryDy=0;" parent="1" source="node1" target="node4" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <Array as="points" />
          </mxGeometry>
        </mxCell>
        <mxCell id="edge3" value="" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;exitX=0.500;exitY=0.000;exitDx=0;exitDy=0;entryX=0.500;entryY=1.002;entryDx=0;entryDy=0;" parent="1" source="node4" target="node5" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="996" y="645" />
              <mxPoint x="1071" y="645" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="edge0" value="" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;exitX=0.000;exitY=0.692;exitDx=0;exitDy=0;entryX=1.000;entryY=0.507;entryDx=0;entryDy=0;" parent="1" source="node0" target="node1" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <Array as="points" />
          </mxGeometry>
        </mxCell>
        <mxCell id="edge2" value="" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=1;startArrow=block;startSize=12;endArrow=none;exitX=0.000;exitY=0.331;exitDx=0;exitDy=0;entryX=1.000;entryY=0.500;entryDx=0;entryDy=0;" parent="1" source="node2" target="node3" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <Array as="points" />
          </mxGeometry>
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
