<mxfile host="app.diagrams.net" modified="2022-10-12T10:57:40.463Z" agent="5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.42" etag="a8YyS2ZZHN7aBl20LFKl" version="20.4.0" type="github">
  <diagram id="24_qW6QkzbbYUDk2BQCq" name="第 1 页">
    <mxGraphModel dx="2578" dy="1413" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="0" pageScale="1" pageWidth="827" pageHeight="1169" background="none" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="node0" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;abc.ABC&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;" parent="1" vertex="1">
          <mxGeometry x="920" y="620" width="91" height="30" as="geometry" />
        </mxCell>
        <mxCell id="node6" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;abc.ABCMeta&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __abstractmethods__: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __init__(self, name: str, bases: tuple[type, ...], namespace: dict[str, Any]): &lt;br/&gt; __instancecheck__(cls: ABCMeta, instance: Any): &lt;br/&gt; __subclasscheck__(cls: ABCMeta, subclass: Any): &lt;br/&gt; _dump_registry(cls: ABCMeta, file: SupportsWrite[str] | None = ...): &lt;br/&gt; register(cls: ABCMeta, subclass: type[_T]): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;" parent="1" vertex="1">
          <mxGeometry x="1090" y="549.5" width="374" height="171" as="geometry" />
        </mxCell>
        <mxCell id="node5" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;bank_login.biz.statement_mgr.StatementMgr&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; _last_query_time: &lt;br/&gt; resp_status: &lt;br/&gt; _ori_statements: &lt;br/&gt; _changed_statements: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __init__(self): &lt;br/&gt; _init_last_query_time(self): &lt;br/&gt; _check_table_exist(): &lt;br/&gt; _load_recent_day_statements(self): &lt;br/&gt; owner(self): &lt;br/&gt; pre_check(self): &lt;br/&gt; statements(self): &lt;br/&gt; before_sync_statements(self): &lt;br/&gt; after_sync_statements(self, synced_statements, force_change=False, verbose=False): &lt;br/&gt; sync_statement(self, business_type=None, serial_number=&amp;#39;&amp;#39;): &lt;br/&gt; json_dumps(self, statements: [Statement], at_least_header=False, status=0, pdf_list=[], is_init=0): &lt;br/&gt; json_dumps_daily_settlement(self, pdf_names, at_least_header=False): &lt;br/&gt; to_db(self, statements: [Statement]): &lt;br/&gt; update_query_time(self, business_type: [StatementBusinessType], query_time=0): &lt;br/&gt; push_to_monitor(self, id_, start_time, end_time): &lt;br/&gt; print_statement(statement: Statement): &lt;br/&gt; is_new_or_changed(self, statement: Statement, verbose=False): &lt;br/&gt; is_after_init_statement(self, statement: Statement): &lt;br/&gt; unique_id(account_id, business_type, serial_number): &lt;br/&gt; finger_name(statement: Statement): &lt;br/&gt; changed_statements(self): &lt;br/&gt; get_statement_by_id_from_db(self, id_): &lt;br/&gt; get_statement_by_serial_number(self, business_type, serial_number): &lt;br/&gt; get_statement_trade_dates(self, business_type: StatementBusinessType, serial_number=&amp;#39;&amp;#39;): &lt;br/&gt; gen_date_range(self, business_type: StatementBusinessType, serial_number=&amp;#39;&amp;#39;): &lt;br/&gt; last_query_time(self, business_type: Union[StatementBusinessType, str]): &lt;br/&gt; init_statement(self, init_balance: float, market, trade_time=0): &lt;br/&gt; parse_to_standard_type(which: str, type_str: str): &lt;br/&gt; gen_business_type_serial_number(self, business_type: StatementBusinessType): &lt;br/&gt; _gen_init_serial_number(self): &lt;br/&gt; check_and_add_recent_day_statement(self, statement): &lt;br/&gt; add_last_day_statement(self, statement): &lt;br/&gt; gen_serial_number_to_statements(self, statements: [Statement], sort_func=None, add_begin=0): &lt;br/&gt; _gen_statement_serial_number(trade_time: int, num=1): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;" parent="1" vertex="1">
          <mxGeometry x="-600" y="325" width="650" height="907" as="geometry" />
        </mxCell>
        <mxCell id="node2" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;bank_login.biz.xinhongji.xhj_statement_mgr.XhjStatementMgr&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; _owner: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __init__(self, owner): &lt;br/&gt; owner(self): &lt;br/&gt; pre_check(self): &lt;br/&gt; sync_statement(self, business_type=StatementBusinessType.OTHER, serial_number=&amp;#39;&amp;#39;, is_day_last=False): &lt;br/&gt; sync_trade_statements(self, date_serial_numbers, serial_number, is_day_last): &lt;br/&gt; sync_other_statements(self, date_serial_numbers, serial_number): &lt;br/&gt; get_statements_from_date(self, statement_date: datetime.date, serial_numbers=[]): &lt;br/&gt; extract_statement_info(self, statement_date, statement_html, serial_numbers): &lt;br/&gt; _parse_business_type(serial_number: str): &lt;br/&gt; _gen_common_random_wait(): &lt;br/&gt; get_daily_settlement_pdf(self, date: datetime.date = None): &lt;br/&gt; fetch_daily_settlement_pdf(self, acct_type, acct_id, sid): &lt;br/&gt; get_pdf_params(self): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;" parent="1" vertex="1">
          <mxGeometry x="-790" y="1380" width="700" height="388" as="geometry" />
        </mxCell>
        <mxCell id="node3" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;bank_login.framework.base_mgr.BaseMgr&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; _items: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __init__(self): &lt;br/&gt; add(self, key, value): &lt;br/&gt; remove(self, key): &lt;br/&gt; get(self, key): &lt;br/&gt; exist(self, key): &lt;br/&gt; clear(self): &lt;br/&gt; keys(self): &lt;br/&gt; values(self): &lt;br/&gt; items(self): &lt;br/&gt; length(self): &lt;br/&gt; exec_every(self, callback): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;" parent="1" vertex="1">
          <mxGeometry x="-380" y="-150" width="410" height="340" as="geometry" />
        </mxCell>
        <mxCell id="node1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;object&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __doc__: &lt;br/&gt; __dict__: &lt;br/&gt; __slots__: &lt;br/&gt; __module__: &lt;br/&gt; __annotations__: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __class__(self: _T): &lt;br/&gt; __class__(self, __type: Type[object]): &lt;br/&gt; __init__(self): &lt;br/&gt; __new__(cls: Type[_T]): &lt;br/&gt; __setattr__(self, name: str, value: Any): &lt;br/&gt; __eq__(self, o: object): &lt;br/&gt; __ne__(self, o: object): &lt;br/&gt; __str__(self): &lt;br/&gt; __repr__(self): &lt;br/&gt; __hash__(self): &lt;br/&gt; __format__(self, format_spec: str): &lt;br/&gt; __getattribute__(self, name: str): &lt;br/&gt; __delattr__(self, name: str): &lt;br/&gt; __sizeof__(self): &lt;br/&gt; __reduce__(self): &lt;br/&gt; __reduce_ex__(self, protocol: SupportsIndex): &lt;br/&gt; __reduce_ex__(self, protocol: int): &lt;br/&gt; __dir__(self): &lt;br/&gt; __init_subclass__(cls): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;" parent="1" vertex="1">
          <mxGeometry x="470" y="340" width="296" height="590" as="geometry" />
        </mxCell>
        <mxCell id="node4" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;typing.Hashable&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __hash__(self): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;" parent="1" vertex="1">
          <mxGeometry x="201" y="606" width="149" height="58" as="geometry" />
        </mxCell>
        <mxCell id="edge2" value="" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=1;startArrow=classic;startSize=12;endArrow=none;strokeColor=#595959;exitX=1.001;exitY=0.500;exitDx=0;exitDy=0;entryX=0.000;entryY=0.500;entryDx=0;entryDy=0;" parent="1" source="node0" target="node6" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <Array as="points" />
          </mxGeometry>
        </mxCell>
        <mxCell id="label16" value="isinstanceof" style="edgeLabel;resizable=0;html=1;align=left;verticalAlign=top;strokeColor=default;" parent="edge2" vertex="1" connectable="0">
          <mxGeometry x="932" y="720" as="geometry" />
        </mxCell>
        <mxCell id="edge5" value="" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=0.001;exitY=0.500;exitDx=0;exitDy=0;entryX=1.000;entryY=0.500;entryDx=0;entryDy=0;" parent="1" source="node0" target="node1" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <Array as="points" />
          </mxGeometry>
        </mxCell>
        <mxCell id="edge4" value="" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=0.750;exitY=1.000;exitDx=0;exitDy=0;entryX=0.500;entryY=1.001;entryDx=0;entryDy=0;" parent="1" source="node5" target="node0" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="201" y="1242" />
              <mxPoint x="922" y="1242" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="edge0" value="" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=0.500;exitY=0.000;exitDx=0;exitDy=0;entryX=0.250;entryY=1.000;entryDx=0;entryDy=0;" parent="1" source="node5" target="node3" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <Array as="points" />
          </mxGeometry>
        </mxCell>
        <mxCell id="edge1" value="" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=0.500;exitY=0.000;exitDx=0;exitDy=0;entryX=0.250;entryY=1.000;entryDx=0;entryDy=0;" parent="1" source="node2" target="node5" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <Array as="points" />
          </mxGeometry>
        </mxCell>
        <mxCell id="edge3" value="" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=0.750;exitY=1.000;exitDx=0;exitDy=0;entryX=0.500;entryY=0.000;entryDx=0;entryDy=0;" parent="1" source="node3" target="node1" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="263" y="315" />
              <mxPoint x="678" y="315" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="edge6" value="" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=1;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=0.000;exitY=0.500;exitDx=0;exitDy=0;entryX=1.000;entryY=0.500;entryDx=0;entryDy=0;" parent="1" source="node1" target="node4" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <Array as="points" />
          </mxGeometry>
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
